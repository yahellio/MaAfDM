import React, { useState, useRef, useEffect } from 'react';
import './App.css';

function App() {
  const [selectedElement, setSelectedElement] = useState(null);
  const [elements, setElements] = useState([]);
  const [error, setError] = useState('');
  const [result, setResult] = useState('');
  const canvasRef = useRef(null);

  const faceElements = {
    'eye': { emoji: 'üëÅÔ∏è', description: '–ì–ª–∞–∑–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)' },
    'nose': { emoji: 'üëÉ', description: '–ù–æ—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)' },
    'mouth': { emoji: 'üëÑ', description: '–†–æ—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)' },
    'hat': { emoji: 'üé©', description: '–®–ª—è–ø–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)' }
  };

  // –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–∏—Ü
  const grammar = {
    'Face': [
      ['eyes', 'mouth'],                 // –¢–æ–ª—å–∫–æ –≥–ª–∞–∑–∞ –∏ —Ä–æ—Ç
      ['eyes', 'nose', 'mouth'],        // –ì–ª–∞–∑–∞, –Ω–æ—Å –∏ —Ä–æ—Ç
      ['hat', 'eyes', 'mouth'],         // –®–ª—è–ø–∞, –≥–ª–∞–∑–∞ –∏ —Ä–æ—Ç
      ['hat', 'eyes', 'nose', 'mouth']  // –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    ],
    'eyes': [['eye', 'eye']],          // –ì–ª–∞–∑–∞ –≤—Å–µ–≥–¥–∞ –ø–∞—Ä–æ–π
  };

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä –ª–∏—Ü–∞
    ctx.beginPath();
    ctx.arc(150, 150, 100, 0, 2 * Math.PI);
    ctx.strokeStyle = '#000';
    ctx.lineWidth = 2;
    ctx.stroke();
    
    // –†–∏—Å—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    elements.forEach(el => {
      ctx.font = '30px Arial';
      ctx.fillText(el.emoji, el.x - 15, el.y + 10);
    });
  }, [elements]);

  const handleCanvasClick = (e) => {
    if (!selectedElement) return;
    
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // –î–ª—è –≥–ª–∞–∑ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –ø–∞—Ä—É
    if (selectedElement === 'eye') {
      setElements([
        ...elements,
        { type: 'eye', emoji: faceElements.eye.emoji, x: x - 30, y: y },
        { type: 'eye', emoji: faceElements.eye.emoji, x: x + 30, y: y }
      ]);
    } else {
      setElements([
        ...elements,
        { type: selectedElement, emoji: faceElements[selectedElement].emoji, x, y }
      ]);
    }
    
    setError('');
    setResult('');
  };

  const validateFace = () => {
    setError('');
    setResult('');
    
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)  
  const sortedElements = [...elements].sort((a, b) => a.y - b.y);

  // –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
  const sequence = sortedElements.map(el => el.type);
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ
    try {
      const remaining = tryParse(sequence, 'Face');

      if (remaining !== null && remaining.length === 0) {
        setResult('–õ–∏—Ü–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–∏–ø: ' + getFaceType(sequence));
      } else {
        setError('–õ–∏—Ü–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º!');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—Ü–∞: ' + err.message);
    }
  };
  
  const tryParse = (sequence, symbol) => {
    if (symbol === sequence[0]) return sequence.slice(1);
    
    for (const rule of grammar[symbol] || []) {
      let remainingSequence = [...sequence];
      let allMatched = true;
      
      for (const part of rule) {
        const result = tryParse(remainingSequence, part);
        if (!result) {
          allMatched = false;
          break;
        }
        remainingSequence = result;
      }
      
      if (allMatched) return remainingSequence;
    }
    
    return null;
  };

  const getFaceType = (sequence) => {
    const hasHat = sequence.includes('hat');
    const hasNose = sequence.includes('nose');
    
    if (hasHat && hasNose) return '–ü–æ–ª–Ω–æ–µ –ª–∏—Ü–æ (—Å–æ —à–ª—è–ø–æ–π –∏ –Ω–æ—Å–æ–º)';
    if (hasHat) return '–õ–∏—Ü–æ —Å–æ —à–ª—è–ø–æ–π';
    if (hasNose) return '–õ–∏—Ü–æ —Å –Ω–æ—Å–æ–º';
    return '–ë–∞–∑–æ–≤–æ–µ –ª–∏—Ü–æ';
  };

  const clearCanvas = () => {
    setElements([]);
    setError('');
    setResult('');
  };

  return (
    <div className="App">
      <h1>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞ —Å –ø–æ–º–æ—â—å—é —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞</h1>
      
      <div className="controls">
        <h3>–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç:</h3>
        <div className="element-buttons">
          {Object.entries(faceElements).map(([key, value]) => (
            <button
              key={key}
              className={selectedElement === key ? 'selected' : ''}
              onClick={() => setSelectedElement(key)}
            >
              {value.emoji} {value.description}
            </button>
          ))}
        </div>
        
        <div className="action-buttons">
          <button onClick={validateFace}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏—Ü–æ</button>
          <button onClick={clearCanvas}>–û—á–∏—Å—Ç–∏—Ç—å</button>
        </div>
      </div>
      
      <div className="canvas-container">
        <canvas
          ref={canvasRef}
          width="300"
          height="300"
          onClick={handleCanvasClick}
        />
      </div>
      
      {error && <div className="error">{error}</div>}
      {result && <div className="result">{result}</div>}
      
      <div className="rules">
        <h3>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–∞:</h3>
        <ul>
          <li>–ì–ª–∞–∑–∞ (üëÅÔ∏è) - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–∞—Ä–æ–π)</li>
          <li>–†–æ—Ç (üëÑ) - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç</li>
          <li>–ù–æ—Å (üëÉ) - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç</li>
          <li>–®–ª—è–ø–∞ (üé©) - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç</li>
          <li>–ü–æ—Ä—è–¥–æ–∫: —à–ª—è–ø–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Üí –≥–ª–∞–∑–∞ ‚Üí –Ω–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Üí —Ä–æ—Ç</li>
        </ul>
      </div>
    </div>
  );
}

export default App;